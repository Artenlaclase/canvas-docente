---
import { Image } from 'astro:assets';

interface Props {
  images: any[]; // astro:assets ImageMetadata[]
  altBase?: string;
}

const { images, altBase = 'Imagen de galería' } = Astro.props as Props;

// Build src list and indices for client script
const items = images.map((img, idx) => ({ idx, src: (img as any).src ?? img, w: (img as any).width, h: (img as any).height }));
---
<div class="lb-root" data-items={JSON.stringify(items)}>
  <div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
    {items.map((it) => (
      <button type="button" class="group overflow-hidden rounded-lg border border-slate-200 focus:outline-none" data-open-index={it.idx} aria-label={`Abrir ${altBase} ${it.idx + 1}`}>
        <Image src={images[it.idx]} alt={`${altBase} ${it.idx + 1}`} class="aspect-[4/3] w-full object-cover group-hover:scale-[1.02] transition" />
      </button>
    ))}
  </div>

  {/* Lightbox Modal */}
  <div id="lightbox" class="fixed inset-0 z-50 hidden" aria-hidden="true">
    <div id="backdrop" class="absolute inset-0 bg-black/70"></div>
    <div class="absolute inset-0 flex items-center justify-center p-4">
      <div class="relative w-full max-w-6xl">
        <button id="closeBtn" class="absolute -top-10 right-0 text-white/90 hover:text-white text-2xl" aria-label="Cerrar">×</button>
        <div class="relative bg-black rounded-lg overflow-hidden">
          <button id="prevBtn" class="absolute left-2 top-1/2 -translate-y-1/2 z-10 h-10 w-10 rounded-full bg-black/40 text-white hover:bg-black/60">‹</button>
          <button id="nextBtn" class="absolute right-2 top-1/2 -translate-y-1/2 z-10 h-10 w-10 rounded-full bg-black/40 text-white hover:bg-black/60">›</button>
          <div class="w-[min(100vw,96rem)] max-h-[95vh] flex items-center justify-center">
            <img id="lightboxImage" class="max-h-[95vh] w-auto object-contain select-none" alt={altBase} />
          </div>
        </div>
        <div id="counter" class="mt-2 text-center text-white/90"></div>
      </div>
    </div>
  </div>

  <script>
  // @ts-nocheck
  (function(){
    const cs = document.currentScript;
    const root = cs && cs.closest('.lb-root');
    if (!root) return;
    const data = root.getAttribute('data-items') || '[]';
    const items = JSON.parse(data);
  /** @type {number} */
  let current = 0;
  const lightbox = root.querySelector('#lightbox');
  const imgEl = /** @type {HTMLImageElement|null} */(root.querySelector('#lightboxImage'));
  const closeBtn = /** @type {HTMLButtonElement|null} */(root.querySelector('#closeBtn'));
  const nextBtn = /** @type {HTMLButtonElement|null} */(root.querySelector('#nextBtn'));
  const prevBtn = /** @type {HTMLButtonElement|null} */(root.querySelector('#prevBtn'));
  const backdrop = root.querySelector('#backdrop');
  const counter = /** @type {HTMLElement|null} */(root.querySelector('#counter'));

  /** @param {number} index */
  function openAt(index){
      current = index;
      update();
      if (lightbox) lightbox.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }
    function close(){
      if (lightbox) lightbox.classList.add('hidden');
      document.body.style.overflow = '';
    }
    function update(){
      if (imgEl) imgEl.setAttribute('src', items[current].src);
      if (counter) counter.textContent = `${current + 1} / ${items.length}`;
    }
    function next(){
      current = (current + 1) % items.length;
      update();
    }
    function prev(){
      current = (current - 1 + items.length) % items.length;
      update();
    }

    root.querySelectorAll('[data-open-index]').forEach((btn) => {
      btn.addEventListener('click', () => {
        const attr = btn.getAttribute('data-open-index');
        const idx = attr ? parseInt(attr, 10) : 0;
        openAt(idx);
      });
    });
    if (closeBtn) closeBtn.addEventListener('click', close);
    if (backdrop) backdrop.addEventListener('click', close);
    if (nextBtn) nextBtn.addEventListener('click', next);
    if (prevBtn) prevBtn.addEventListener('click', prev);
    document.addEventListener('keydown', (e) => {
      if (lightbox && lightbox.classList.contains('hidden')) return;
      if (e.key === 'Escape') close();
      if (e.key === 'ArrowRight') next();
      if (e.key === 'ArrowLeft') prev();
    });
  })();
  </script>
</div>
