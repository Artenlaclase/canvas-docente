---
const { post } = Astro.props as { post: any };
// Resolver portada como en BlogCard
const assets = import.meta.glob('../assets/images/**/*', { eager: true, import: 'default' }) as Record<string, any>;
const coverPath = post.data.cover as string | undefined;
const isProxy = !!coverPath && coverPath.startsWith('/api/img-proxy');
const isPlaceholder = coverPath === '/placeholder-cover.svg';
const isLocal = !!coverPath && !isProxy && !isPlaceholder && (
  coverPath.startsWith('/src/') ||
  /^(\.\/|\.\.\/)/.test(coverPath) ||
  /\/assets\/images\//.test(coverPath)
);

function resolveCover(path?: string): string | undefined {
  if (!path) return undefined;
  if (path.startsWith('/src/')) {
    const key = '..' + path.replace('/src', '');
    if (assets[key]) return typeof assets[key] === 'string' ? assets[key] : assets[key]?.src;
  }
  const idx = path.indexOf('assets/images/');
  if (idx !== -1) {
    const tail = path.slice(idx);
    const key = '..' + '/' + tail.replace(/^assets\//, 'assets/');
    if (assets[key]) return typeof assets[key] === 'string' ? assets[key] : assets[key]?.src;
  }
  const file = path.split('/').pop();
  if (file) {
    const match = Object.keys(assets).find((k) => k.endsWith('/' + file));
    if (match) return typeof assets[match] === 'string' ? assets[match] : assets[match]?.src;
  }
  return undefined;
}

function firstImageFromHtml(html?: string): string | undefined {
  if (!html || typeof html !== 'string') return undefined;
  const m = html.match(/<img[^>]+src=["']([^"']+)["']/i);
  return m?.[1];
}

const resolved = resolveCover(coverPath);
if (import.meta.env.DEV && coverPath && isLocal && !resolved) {
  console.warn(`[FeaturedBlogCard] No se pudo resolver la portada local: ${coverPath}.`);
}

const isWpPost = typeof post.id === 'number';
const fallbackHtmlImg = !coverPath && !isWpPost ? firstImageFromHtml(post.contentHtml) : undefined;
let displayCover = isWpPost ? (coverPath || undefined) : (resolved || coverPath || fallbackHtmlImg);
if (!displayCover) displayCover = '/placeholder-cover.svg';
---
<a href={`/blog/${encodeURIComponent(post.slug)}${post.id ? `?id=${encodeURIComponent(post.id)}` : ''}`} class="group block rounded-xl overflow-hidden border border-slate-200 hover:shadow-lg transition bg-white">
  {displayCover ? (() => {
    const candidates: string[] = (post.data?.candidateCovers || []).slice().reverse();
    const entries = candidates.map((u: string) => {
      const m = u.match(/-([0-9]{2,5})x([0-9]{2,5})(\.[a-z]{2,5})(?:$|[?&#])/i);
      if (m) return `${u} ${m[1]}w`; return u;
    });
    const srcset = entries.length ? entries.join(', ') : undefined;
    const sizes = srcset ? '(max-width: 768px) 100vw, (max-width: 1280px) 75vw, 1024px' : undefined;
    let width: string | undefined; let height: string | undefined;
    const sizeMatch = String(displayCover).match(/-([0-9]{2,5})x([0-9]{2,5})(\.[a-z]{2,5})(?:$|[?&#])/i);
    if (sizeMatch) { width = sizeMatch[1]; height = sizeMatch[2]; }
    return (
      <img
        src={displayCover}
        alt={post.data.title || 'Imagen del artÃ­culo'}
        loading="lazy"
        decoding="async"
        srcset={srcset}
        sizes={sizes}
        width={width}
        height={height}
        class="aspect-[16/9] w-full object-cover group-hover:scale-[1.01] transition"
      />
    );
  })() : null}
  <div class="p-6">
    <h2 class="text-2xl md:text-3xl font-bold leading-tight">{post.data.title}</h2>
    <p class="text-sm text-slate-500 mt-2">
      {post.data.author ? `Por ${post.data.author}` : new Date(post.data.date).toLocaleDateString('es')}
    </p>
    <p class="text-base md:text-lg text-slate-700 mt-3 line-clamp-3">{post.data.excerpt}</p>
  </div>
</a>
