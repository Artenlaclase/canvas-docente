---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Header from "../../components/Header.astro";
import BlogCard from "../../components/BlogCard.astro";
import FeaturedBlogCard from "../../components/FeaturedBlogCard.astro";
import BlogPagination from "../../components/BlogPagination.astro";
import { getCollection } from 'astro:content';
import { getWpBase, listWpPostsPage } from "../../utils/wp";
export const prerender = false;

// Pagination config
const PER_PAGE = 9;

// Read query param for server-side search
const q = (Astro.url.searchParams.get('q') || '').trim();

// Try WordPress first if configured via env; otherwise use local content collection
let posts: any[] = [];
let totalPages = 1;
const current = 1;
const wpBase = getWpBase();
if (wpBase) {
  try {
    const { posts: wpPosts, totalPages: tp } = await listWpPostsPage(1, PER_PAGE, q ? { search: q } : undefined);
    posts = wpPosts;
    totalPages = tp || 1;
  } catch (err) {
    console.warn('[Blog] WP fetch failed, falling back to local collection:', err);
  }
}
if (!posts.length) {
  const locals = (await getCollection('blog')).sort((a,b) => +new Date(b.data.date) - +new Date(a.data.date));
  if (q) {
    const qq = q.toLowerCase();
    const filtered = locals.filter((p) => {
      const title = String(p.data.title || '').toLowerCase();
      const d: any = p.data || {};
      const cats = (d['categories'] ?? d['category'] ?? d['tags'] ?? d['tag'] ?? []);
      const catsStr = (Array.isArray(cats) ? cats : [cats]).map((c: any) => typeof c === 'string' ? c : (c?.name || c?.title || '')).join(' ').toLowerCase();
      return title.includes(qq) || catsStr.includes(qq);
    });
    totalPages = Math.max(1, Math.ceil(filtered.length / PER_PAGE));
    posts = filtered.slice(0, PER_PAGE);
  } else {
    totalPages = Math.max(1, Math.ceil(locals.length / PER_PAGE));
    posts = locals.slice(0, PER_PAGE);
  }
}

// Helper: extract categories as a space-joined string for filtering
const getCats = (post: any) => {
  const d = (post && post.data) || {};
  let cats: any = d.categories ?? d.category ?? d.tags ?? d.tag ?? [];
  if (typeof cats === 'string') cats = [cats];
  if (!Array.isArray(cats)) cats = [];
  cats = cats.map((c: any) => typeof c === 'string' ? c : (c?.name || c?.title || ''));
  return cats.filter(Boolean).join(' ');
};
---
<BaseLayout title="Blog | Canvas Docente">
  <Fragment slot="header"><Header /></Fragment>
  <h1 class="sr-only">Blog</h1>
  <div class="mb-6">
    <label for="blog-search" class="sr-only">Buscar entradas</label>
    <div class="relative max-w-xl">
  <input id="blog-search" type="search" value={q} placeholder="Buscar por título o categoría..." class="w-full rounded-lg border border-slate-300 pl-10 pr-3 py-2 outline-none focus:ring-2 focus:ring-sky-500 focus:border-sky-500" />
      <svg class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
    </div>
  </div>
  {posts.length > 0 ? (
    <div id="blog-grid" class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <div class="lg:col-span-2 space-y-6">
        <div class="blog-item" data-title={(posts[0].data.title || '').toLowerCase()} data-cats={getCats(posts[0]).toLowerCase()}>
          <FeaturedBlogCard post={posts[0]} />
        </div>
        <!-- Dos columnas con dos entradas debajo del destacado -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {posts.slice(1, 3).map((post) => <div class="blog-item" data-title={(post.data.title || '').toLowerCase()} data-cats={getCats(post).toLowerCase()}><BlogCard post={post} /></div>)}
        </div>
      </div>
      <!-- Columna lateral con hasta 4 entradas visibles y navegación -->
      <aside class="lg:col-span-1">
        <div class="flex items-center justify-between mb-2">
          <h2 class="text-lg font-semibold">Más entradas</h2>
          <div class="flex items-center gap-2">
            <button id="side-prev" class="h-8 w-8 grid place-items-center rounded-md border border-slate-300 text-slate-700 hover:bg-slate-50" aria-label="Anteriores">‹</button>
            <button id="side-next" class="h-8 w-8 grid place-items-center rounded-md border border-slate-300 text-slate-700 hover:bg-slate-50" aria-label="Siguientes">›</button>
          </div>
        </div>
        <div id="side-list" class="space-y-4">
          {posts.slice(3).map((post, idx) => (
            <div class={`sidebar-item blog-item ${idx < 4 ? '' : 'hidden'}`} data-index={idx} data-title={(post.data.title || '').toLowerCase()} data-cats={getCats(post).toLowerCase()}>
              <BlogCard post={post} />
            </div>
          ))}
        </div>
      </aside>
    </div>
  ) : null}
  <style is:inline>
    .hidden-by-search { display: none !important; }
  </style>
  <script>
    // @ts-nocheck
    (function(){
      function initSidebarPager(){
        const list = document.getElementById('side-list');
        if (!list) return;
        const items = Array.from(list.querySelectorAll('.sidebar-item'));
        const prevBtn = document.getElementById('side-prev');
        const nextBtn = document.getElementById('side-next');
        const pageSize = 4;
        let page = 0;
        const maxPage = Math.max(0, Math.ceil(items.length / pageSize) - 1);
        function render(){
          items.forEach((el, i) => {
            const start = page * pageSize;
            const end = start + pageSize - 1;
            el.classList.toggle('hidden', !(i >= start && i <= end));
          });
          if (prevBtn) prevBtn.toggleAttribute('disabled', page === 0);
          if (nextBtn) nextBtn.toggleAttribute('disabled', page >= maxPage);
        }
        if (prevBtn) prevBtn.addEventListener('click', () => { if (page > 0) { page--; render(); } });
        if (nextBtn) nextBtn.addEventListener('click', () => { if (page < maxPage) { page++; render(); } });
        render();
      }
      if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', initSidebarPager);
      else initSidebarPager();

      // Simple client-side filter over current page's posts
      function initSearch(){
        const input = document.getElementById('blog-search');
        const grid = document.getElementById('blog-grid');
        if (!input || !grid) return;
        const items = Array.from(grid.querySelectorAll('.blog-item'));
        input.addEventListener('input', () => {
          const q = input.value.trim().toLowerCase();
          if (!q) {
            items.forEach(el => el.classList.remove('hidden-by-search'));
          } else {
            items.forEach(el => {
              const t = (el.getAttribute('data-title') || '');
              const c = (el.getAttribute('data-cats') || '');
              el.classList.toggle('hidden-by-search', !(t.includes(q) || c.includes(q)));
            });
          }
        });
      }
      if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', initSearch);
      else initSearch();

      // Navigate on Enter to server-side search (?q=)
      function initSearchNav(){
        const input = document.getElementById('blog-search');
        if (!input) return;
        const base = '/blog';
        function go(){
          const v = input.value.trim();
          const url = v ? `${base}?q=${encodeURIComponent(v)}` : base;
          if (window.location.pathname + window.location.search !== url) window.location.href = url;
        }
        input.addEventListener('keydown', (e)=>{ if (e.key === 'Enter') go(); });
      }
      if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', initSearchNav);
      else initSearchNav();
    })();
  </script>
  <BlogPagination current={current} totalPages={totalPages} base={`/blog${q ? `?q=${encodeURIComponent(q)}` : ''}`} />
</BaseLayout>
