---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Header from "../../components/Header.astro";
import { getCollection } from 'astro:content';
import { getWpBase, getWpPostBySlug, type NormalizedPost } from "../../utils/wp";

export const prerender = false;

// SSR: resolver el post por slug en cada request para reflejar cambios inmediatos en WordPress
const { slug } = Astro.params;
let wpPost: NormalizedPost | undefined;
let localPost: any | undefined;
const wpBase = getWpBase();
if (wpBase && slug) {
  try {
    wpPost = await getWpPostBySlug(slug);
  } catch (e) {
    console.warn('[Blog SSR] Error al obtener post WP por slug:', e);
  }
}
if (!wpPost && slug) {
  const all = await getCollection('blog');
  localPost = all.find((p) => p.slug === slug);
}
if (!wpPost && !localPost) {
  return new Response('Post no encontrado', { status: 404 });
}
const isWP = !!wpPost;
let Content: any = null;
if (!isWP && localPost) {
  const rendered = await localPost.render();
  Content = rendered.Content;
}
// Resolver portada: assets locales bajo src/assets/images y retorno de URL string
const assets = import.meta.glob('../../assets/images/**/*', { eager: true, import: 'default' }) as Record<string, any>;
/**
 * @param {string | undefined} path
 * @returns {string | undefined}
 */
function resolveCoverPath(path: string | undefined): string | undefined {
  if (!path) return undefined;
  // /src/... -> clave '../../assets/...'
  if (path.startsWith('/src/')) {
    const key = '../..' + path.replace('/src', '');
    const hit = assets[key];
    if (hit) return typeof hit === 'string' ? hit : hit?.src;
  }
  // ...assets/images/...
  const idx = path.indexOf('assets/images/');
  if (idx !== -1) {
    const tail = path.slice(idx);
    const key = '../..' + '/' + tail.replace(/^assets\//, 'assets/');
    const hit = assets[key];
    if (hit) return typeof hit === 'string' ? hit : hit?.src;
  }
  // Búsqueda por nombre de archivo
  const file = path.split('/').pop();
  if (file) {
    const matchKey = Object.keys(assets).find((k) => k.endsWith('/' + file));
    if (matchKey) {
      const hit = assets[matchKey];
      return typeof hit === 'string' ? hit : hit?.src;
    }
  }
  return undefined;
}
---
<BaseLayout title={`${(isWP ? wpPost!.data.title : localPost.data.title)} | Blog`}>
  <Fragment slot="header"><Header /></Fragment>
  <article class="prose mx-auto max-w-4xl">
    <h1>{isWP ? wpPost!.data.title : localPost.data.title}</h1>
    {isWP ? (
      wpPost!.data.cover ? (
        <img
          src={wpPost!.data.cover}
          alt={wpPost!.data.title}
          loading="lazy"
          class="w-full aspect-[16/9] object-cover rounded-lg"
        />
      ) : null
    ) : (
      (() => {
        const coverPath = localPost.data.cover as string | undefined;
        const resolvedUrl = resolveCoverPath(coverPath);
        if (import.meta.env.DEV && coverPath && (/^(\/.|\.\/|\.\.\/)/.test(coverPath) || coverPath.startsWith('/src/')) && !resolvedUrl) {
          console.warn(`[Blog post] No se pudo resolver la portada local: ${coverPath}. Asegúrate de que exista en src/assets/images y usa una ruta relativa, por ejemplo ../../assets/images/...`);
        }
        const finalSrc = (resolvedUrl || coverPath || '') + '';
        return coverPath ? (
          <img
            src={finalSrc}
            alt={localPost.data.title}
            loading="lazy"
            class="w-full aspect-[16/9] object-cover rounded-lg"
          />
        ) : null;
      })()
    )}
    <p class="text-sm text-slate-500">{new Date((isWP ? wpPost!.data.date : localPost.data.date)).toLocaleDateString('es')}</p>
    {isWP ? (
      <div set:html={wpPost!.contentHtml} />
    ) : (
      <Content />
    )}
  </article>
</BaseLayout>
