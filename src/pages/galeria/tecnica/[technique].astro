---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import Header from "../../../components/Header.astro";
import Gallery from "../../../components/Gallery.astro";
import LightboxGallery from "../../../components/LightboxGallery.astro";
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import captionsMap from '../../../content/gallery-captions';

export const prerender = true;
export async function getStaticPaths() {
  // Generar páginas para todas las técnicas, aunque no existan entradas en la colección
  const techniques = [
    'Pintura',
    'Collage',
    'Audiovisual',
    'Mosaico',
    'Volumen',
    'Máscaras',
    'Lámparas',
    'Diseño',
    'Dibujo',
  ];
  return techniques.map((t) => ({ params: { technique: t }, props: { technique: t } }));
}

const fromProps = (Astro.props as { technique?: string }).technique;
const fromParams = Astro.params.technique ? decodeURIComponent(Astro.params.technique) : undefined;
const technique = fromProps ?? fromParams ?? '';

const all = await getCollection('galeria');
const items = all.filter((p) => p.data.technique === technique);

// Descripciones breves por técnica
const descriptions: Record<string, string> = {
  'Pintura': 'Exploraciones pictóricas, color y composición en distintos soportes y formatos.',
  'Collage': 'Composición con materiales diversos: papeles, revistas y texturas superpuestas.',
  'Audiovisual': 'Narrativas visuales y sonoras: registro, montaje y experimentación con video.',
  'Mosaico': 'Construcción de imágenes a partir de teselas y patrones modulares.',
  'Volumen': 'Trabajo tridimensional: maquetas, esculturas y objetos con materiales variados.',
  'Máscaras': 'Diseño y creación de máscaras con identidad, cultura y performance.',
  'Lámparas': 'Diseño de luminarias artesanales integrando forma, función y atmósfera.',
  'Diseño': 'Lenguaje visual aplicado: afiches, tipografía, composición y prototipado.',
  'Dibujo': 'Técnicas de línea, sombreado y observación para desarrollar el gesto y la mirada.',
};

// Carga de imágenes desde assets según técnica (globs estáticos requeridos por Vite)
const pinturaMods = import.meta.glob('../../../assets/images/pintura*.{jpg,JPG,jpeg,png,webp}', { eager: true, import: 'default' });
const collageMods = import.meta.glob('../../../assets/images/collage*.{jpg,JPG,jpeg,png,webp}', { eager: true, import: 'default' });
const audiovisualMods = import.meta.glob('../../../assets/images/audiovisual*.{jpg,JPG,jpeg,png,webp}', { eager: true, import: 'default' });
const mosaicoMods = import.meta.glob('../../../assets/images/mosaico*.{jpg,JPG,jpeg,png,webp}', { eager: true, import: 'default' });
const volumenMods = import.meta.glob('../../../assets/images/volumen*.{jpg,JPG,jpeg,png,webp}', { eager: true, import: 'default' });
const mascaraSingMods = import.meta.glob('../../../assets/images/mascara*.{jpg,JPG,jpeg,png,webp}', { eager: true, import: 'default' });
const mascaraPluralMods = import.meta.glob('../../../assets/images/mascaras*.{jpg,JPG,jpeg,png,webp}', { eager: true, import: 'default' });
const lamparasMods = import.meta.glob('../../../assets/images/lamparas*.{jpg,JPG,jpeg,png,webp}', { eager: true, import: 'default' });
const disenoAccMods = import.meta.glob('../../../assets/images/diseño*.{jpg,JPG,jpeg,png,webp}', { eager: true, import: 'default' });
const disenoPlainMods = import.meta.glob('../../../assets/images/diseno*.{jpg,JPG,jpeg,png,webp}', { eager: true, import: 'default' });
const dibujoMods = import.meta.glob('../../../assets/images/dibujo*.{jpg,JPG,jpeg,png,webp}', { eager: true, import: 'default' });

const techToMods: Record<string, Record<string, any>> = {
  'Pintura': pinturaMods,
  'Collage': collageMods,
  'Audiovisual': audiovisualMods,
  'Mosaico': mosaicoMods,
  'Volumen': volumenMods,
  'Máscaras': { ...mascaraSingMods, ...mascaraPluralMods },
  'Lámparas': lamparasMods,
  'Diseño': { ...disenoAccMods, ...disenoPlainMods },
  'Dibujo': dibujoMods,
};

function imagesEntriesFor(tech: string): Array<[string, any]> {
  const mods = techToMods[tech];
  if (!mods) return [];
  return Object.entries(mods).sort(([a], [b]) => a.localeCompare(b));
}

const techniqueImageEntries = imagesEntriesFor(technique);
const techniqueImages = techniqueImageEntries.map(([, mod]) => mod as any);

// Per-image captions: description — year · school, if provided in captions map
const captions = techniqueImageEntries.map(([path]) => {
  const base = (path.split('/').pop() || path);
  const rec = (captionsMap?.[technique] && captionsMap[technique][base]) || undefined;
  if (!rec) return '';
  const parts: string[] = [];
  if (rec.description) parts.push(String(rec.description));
  const tail: string[] = [];
  if (rec.year) tail.push(String(rec.year));
  if (rec.school) tail.push(String(rec.school));
  if (tail.length) parts.push(tail.join(' · '));
  return parts.join(' — ');
});
// Videos por técnica (por ahora, solo 'Máscaras')
const videosByTechnique: Record<string, string[]> = {
  'Máscaras': [
    'gQ9AeOeJX1k',
    'jsGT0yx8gKc',
    'qrW2V9qM8uY',
  ],
  'Audiovisual': [
    '8sY55nBkj5s',
    'RTjjC-X_eKA',
    '1hVDfd4bCqc',
    'XEYVMhgkR8I',
    'zMBGLcnq4Ss',
  ],
  'Volumen': [
    'pNn-ny1EvAc',
    'MVb0JvNbYCs',
    'PuIiLw65JJU',
    'Hj0IZOCtPyE',
    'R4GQ4Z4sOY8',
    'WLiIE6pj_tM',
    '5G6UYTdF_X8',
    'MNfhHAoZWUI',
  ],
  'Lámparas': [
    'J_GFneb2gNA',
    'GBWoQNeF0AA',
    'OsYarQyn8qo',
  ],
  'Mosaico': [
    'WG_XxmmN4p0',
  ],
  'Diseño': [
    'mWyme7rLMkQ',
    'tQMzXoUNh3c',
    'Aber-IwWh3Q',
    'P7nFapQS8lo',
    '35r2FH6Tzi8',
    'v5rRjgN0D-U',
  ],
};
const videoIds = videosByTechnique[technique] ?? [];
---
<BaseLayout title={`${technique} | Galería`}>
  <Fragment slot="header"><Header /></Fragment>
  
  <!-- Top breadcrumb / back controls -->
  <div class="mb-4 flex items-center justify-between">
    <nav class="flex items-center gap-2 text-sm text-slate-600">
      <a href="/" class="inline-flex items-center gap-2 px-3 py-1.5 rounded-full border border-slate-200 bg-white shadow-sm hover:bg-slate-50 hover:border-slate-300 transition">
        <span class="i-heroicons-home-20-solid" aria-hidden="true"></span>
        <span>Inicio</span>
      </a>
      <span class="text-slate-400">/</span>
      <a href="/galeria" class="inline-flex items-center gap-2 px-3 py-1.5 rounded-full border border-slate-200 bg-white shadow-sm hover:bg-slate-50 hover:border-slate-300 transition">
        <span class="i-heroicons-arrow-uturn-left-20-solid rotate-180" aria-hidden="true"></span>
        <span>Galería</span>
      </a>
      <span class="text-slate-400">/</span>
      <span class="inline-flex items-center gap-2 px-3 py-1.5 rounded-full border border-sky-200 bg-sky-50 text-sky-700">
        <span class="i-heroicons-photo-20-solid" aria-hidden="true"></span>
        <span>{technique}</span>
      </span>
    </nav>
  </div>

  <h1 class="text-2xl font-semibold mb-2">{technique}</h1>
  <p class="text-slate-700 mb-6">{descriptions[technique] ?? 'Selección de trabajos y materiales de referencia para esta técnica.'}</p>

  {techniqueImages.length > 0 ? (
    <section class="mb-10">
      <LightboxGallery images={techniqueImages} altBase={technique} captions={captions} />
    </section>
  ) : null}

  {videoIds.length > 0 ? (
    <section class="mb-10">
      <h2 class="text-xl font-semibold mb-4">Videos</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        {videoIds.map((id) => (
          <div class="w-full aspect-video overflow-hidden rounded-lg border border-slate-200 bg-black">
            <iframe
              src={`https://www.youtube-nocookie.com/embed/${id}`}
              title="Video de YouTube"
              class="w-full h-full"
              frameborder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowfullscreen
              referrerpolicy="strict-origin-when-cross-origin"
            />
          </div>
        ))}
      </div>
    </section>
  ) : null}

  <!-- Floating scroll-to-top button -->
  <button id="scrollTopBtn" aria-label="Subir" class="fixed bottom-6 right-6 z-40 inline-flex items-center justify-center h-11 w-11 rounded-full bg-slate-900 text-white shadow-lg hover:bg-slate-800 transition opacity-0 pointer-events-none">
    ↑
  </button>
  <script is:inline>
    (function(){
      const btn = document.getElementById('scrollTopBtn');
      if(!btn) return;
      const onScroll = () => {
        if (window.scrollY > 400) {
          btn.classList.remove('opacity-0','pointer-events-none');
        } else {
          btn.classList.add('opacity-0','pointer-events-none');
        }
      };
      window.addEventListener('scroll', onScroll, { passive: true });
      onScroll();
      btn.addEventListener('click', () => window.scrollTo({ top: 0, behavior: 'smooth' }));
    })();
  </script>

  
  <div class="mb-4">
    <a href="/galeria" class="inline-flex items-center gap-2 text-slate-600 hover:text-slate-800">
      <span class="text-lg">←</span>
      <span>Volver a la galería</span>
    </a>
  </div>
</BaseLayout>
